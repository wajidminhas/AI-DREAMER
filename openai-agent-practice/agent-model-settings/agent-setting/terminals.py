raw_responses=[ModelResponse(output=[ResponseOutputMessage(id='__fake_id__', content=[ResponseOutputText(annotations=[], text="Hello to you, friend,\nLahore's weather, I can't say,\nData's not available.\n", type='output_text', logprobs=None)], role='assistant', status='completed', type='message')],
                                       usage=Usage(requests=1,
                                                   input_tokens=90,
                                                   input_tokens_details=InputTokensDetails(cached_tokens=0),
                                                   output_tokens=27,
                                                   output_tokens_details=OutputTokensDetails(reasoning_tokens=0),
                                                   total_tokens=117),
                                       response_id=None)]


@pydantic.dataclasses.dataclass
class ModelResponse:
    output: list[TResponseOutputItem]
    """A list of outputs (messages, tool calls, etc) generated by the model"""

    usage: Usage
    """The usage information for the response."""

    response_id: str | None
    """An ID for the response which can be used to refer to the response in subsequent calls to the
    model. Not supported by all model providers.
    If using OpenAI models via the Responses API, this is the `response_id` parameter, and it can
    be passed to `Runner.run`.
    """

    def to_input_items(self) -> list[TResponseInputItem]:
        """Convert the output into a list of input items suitable for passing to the model."""
        # We happen to know that the shape of the Pydantic output items are the same as the
        # equivalent TypedDict input items, so we can just convert each one.
        # This is also tested via unit tests.
        return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore